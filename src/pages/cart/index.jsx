import Nav from "../../Components/Cart/Nav";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import {
  Box,
  Button,
  Heading,
  HStack,
  Image,
  Stack,
  Text,
  VStack,
} from "@chakra-ui/react";
import Cards from "../../Components/Cart/Cards";
// import { data1 } from 'Components/Cart/cart.data.js'
import Coupan from "../../Components/Cart/Coupan";
import OrderSummary from "../../Components/Cart/OrderSummary";
import Footer from "../../Components/Cart/Footer";
import { useDispatch, useSelector } from "react-redux"; //getCard
import { getCard, userPrice, userMaxprice } from "../../redux/card/card.action";
import axios from "axios";
import { useRouter } from "next/router";

let count = 0;
export default function Cart() {
  const [cartLength, setCartLength] = useState([]);
  const [maxprice, setMaxprice] = useState(0);
  const [totalprice, setTotalprice] = useState(0);
  const [cartOutput, setOutput] = useState([]);

  const router = useRouter();

  const handlerouter = () => {
    router.push("/address");
  };

  // redux
  const [user_id, setId] = useState(0);

  const { data, totalPrice, totalMaxprice, datas } = useSelector(
    (store) => store.card
  );
  const dispatch = useDispatch();
  const patchCardapi = (user_id, arr) => {
    return axios.patch(`http://localhost:8080/User-Details/${user_id}`, {
      Orders: arr,
    });
  };

  const handlepatch = async (user_id, arr) => {
    try {
      let res = await patchCardapi(user_id, arr);
    } catch (err) {
      console.log(err);
    }
  };

  const handlequantity = (id, val, user_id) => {
    let arr = data.Orders?.map((el) => {
      if (el.id == id) {
        el.quantity += val;
      }

      return el;
    });

    // setSession(arr)
    handlepatch(user_id, arr);
    // dispatch(getCard(user_id))
    handleTotalprice();
    handleMaxprice();
  };

  const handleTotalprice = () => {
    let ans = 0;
    data.Orders?.map((el) =>
      el.cart == true ? (ans += el.product_price * el.quantity) : 0
    );

    // cart length

    setTotalprice(ans);
    dispatch(userPrice(ans));
  };

  const handleMaxprice = () => {
    let ans = 0;
    data.Orders?.map((el) => {
      return el.cart === true
        ? (ans += el.product_minimum_offer_price * el.quantity)
        : 0;
    });

    setMaxprice(ans);
    dispatch(userMaxprice(maxprice));
  };

  const handleDelete = (id, user_id) => {
    /*
        const deletetodos = session.filter((todo)=>todo.id !== id)
        sessionStorage.setItem("data", JSON.stringify(deletetodos))
        let ss = JSON.parse(sessionStorage.getItem("data"))
        setSession(ss)
        */
    let arr = data.Orders.map((el) => {
      if (el.id == id) {
        el.cart = false;
      }

      return el;
    });

    handlepatch(user_id, arr);

    dispatch(getCard(user_id));
    // window.location.reload();
  };

  useEffect(() => {
    const userId = sessionStorage.getItem("LoggedUser_id");
    setId(userId);
    dispatch(getCard(userId));
    if (data.id == userId) {
      handleTotalprice();
      handleMaxprice();
      // handlequantity();
    }
  }, [totalprice, data.id, dispatch, user_id]);
  return (
    <div>
      <Head>
        <title>Cart</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/images/logo.png" />
      </Head>

      <main>
        <Nav />
        {user_id?.length > 0 ? (
          <>
            <Box border={"0px"} p="20px" bg="#F4F4F4" mt={20}>
              <Stack
                direction={{ base: "column", lg: "row" }}
                m="auto"
                border={"0px"}
              >
                <Box
                  boxShadow="md"
                  p="9px"
                  rounded="md"
                  bg="white"
                  m="auto"
                  w={{ base: "100%", lg: "60%" }}
                >
                  <Heading size="md" p="10px">
                    Shopping Cart
                  </Heading>
                  <Box p="0px" border={"0px"}>
                    <Cards
                      data={data.Orders}
                      handlequantity={handlequantity}
                      handleDelete={handleDelete}
                    />
                  </Box>
                </Box>

                <Box m="auto" w={{ base: "100%", lg: "40%" }}>
                  <Box p="5px" boxShadow="sm" rounded="md" bg="white">
                    <Coupan />
                  </Box>
                  <Box p="5px" boxShadow="sm" rounded="md" bg="white" mt="10px">
                    <Box p="5px">
                      <Heading size="md">Order Summary</Heading>
                    </Box>
                    <Box p="5px">
                      <OrderSummary
                      // maxprice={totalMaxprice}
                      // totalprice={totalPrice}
                      />
                    </Box>

                    <Box pt="25px">
                      <Button
                        w="100%"
                        onClick={() => {
                          handlerouter();
                        }}
                        bg={"teal.400"}
                        color={"white"}
                        _hover={{ bg: "teal" }}
                      >
                        Proceed to Pay ${parseFloat(totalprice - 2).toFixed(2)}
                      </Button>
                    </Box>
                  </Box>
                </Box>
              </Stack>
            </Box>
            <Footer />
          </>
        ) : (
          <Heading textAlign={"center"} mt={20}>
            User Is Not Logged In
          </Heading>
        )}
      </main>
    </div>
  );
}
